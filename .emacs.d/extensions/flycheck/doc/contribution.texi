Flycheck needs your help, in all aspects.  Please

@itemize
@item
report all bugs and issues you can find,
@item
tell us your ideas for improvements or new features,
@item
and send us your patches and pull requests!
@end itemize

This chapter helps you in doing so, by giving you guidelines for
contribution.

@menu
* Reporting issues::            How to report issues with Flycheck
* Contributing syntax checkers::  How to contribute your syntax checkers
* Contributing code::           How to contribute code
* Unit tests::                  How to write unit tests for your code
@end menu

@node Reporting issues, Contributing syntax checkers, ,Contribution
@comment  node-name,  next,  previous,  up
@section Reporting issues

Please report any issues to the
@uref{https://github.com/lunaryorn/flycheck/issues,Flycheck issue
tracker}.

When doing so, please respect the following guidelines:

@itemize
@item
Check that the issue has not already been reported.
@item
Check that the issue has not already been fixed in the latest code.
@item
Be clear and precise.  If possible, name functions and command exactly.
@item
Open an issue with a clear title and description in grammatically
correct, complete sentences.  Include the version of Flycheck as shown
by @kbd{M-x flycheck-version}.
@end itemize

We will try to handle each issue appropriately, and adhering to these
guidelines helps us in doing so.


@node Contributing syntax checkers, Contributing code, Reporting issues, Contribution
@comment  node-name,  next,  previous,  up
@section Contributing syntax checkers

When creating a new syntax checker, either create an issue (see
@ref{Reporting issues}) and paste your syntax checker declaration, or
fork the repository, implement the syntax checker in Flycheck itself and
send us a pull request (see @ref{Contributing code}).

Whatever way you choose, please respect the following guidelines:

@itemize
@item
Provide a link to the website of the syntax checker tool.
@item
Show some example source code that triggered warnings or errors with the
syntax checker tool.
@item
If possible, please add unit tests for your new syntax
checker. @xref{Unit tests}.
@end itemize

@node Contributing code, Unit tests, Contributing syntax checkers, Contribution
@comment  node-name,  next,  previous,  up
@section Contributing code

Please contribute patches to Flycheck as pull requests on Github.

When doing so, please respect the following guidelines:

@itemize
@item
Read how to
@uref{http://gun.io/blog/how-to-github-fork-branch-and-pull-request,
properly contribute to open source projects on Github}.
@item
Use a topic branch to easily amend a pull request later, if necessary.
@item
Write
@uref{http://gun.io/blog/how-to-github-fork-branch-and-pull-request,
good commit messages}.
@item
Use the same coding style and spacing.
@item
Verify your Emacs Lisp code with @code{checkdoc} (@kbd{C-c ? d}).
@item
Add unit tests for your code, if possible.  @xref{Unit tests}.
@item
Open a @uref{https://help.github.com/articles/using-pull-requests,pull
request} that relates to but one subject with a clear title and
description in grammatically correct, complete sentences.  Be sure to
give use cases and rationale for your new feature.
@end itemize

We will try to respect and include each contribution, however we will
not do the following:

@itemize
@item
Include a feature without good use cases and rationale.
@item
Merge poorly written or incomplete code.
@end itemize

@noindent
You will be asked to improve your pull request in these cases.

@node Unit tests, , Contributing code, Contribution
@comment  node-name,  next,  previous,  up
@section Writing unit tests

Flycheck has a comprehensive to maintain and ensure the functionality
and quality of the code.  Please add unit tests for your code if
possible.

The test suite is contained in the @file{tests/} directory and written
using the @ref{Top, , ERT, ert} library.

To add unit tests do the following:

@itemize
@item
Familiarize yourself with the @ref{Top, , ERT, ert} library.
@item
Familiarize yourself with the test suite in @file{flycheck-testsuite.el}.
@item
Add your tests to the appropriate file.  Create a new test file if
necessary.
@item
Extend the provisioning script @file{vagrant/provision.sh} with the
dependencies of your tests, if necessary.  This includes syntax checker
tools.
@item
Install @uref{https://www.virtualbox.org/,Virtual Box} and
@uref{http://www.vagrantup.com/,Vagrant}.
@item
Run your tests with @command{make virtual-test}.
@end itemize

You may also run the tests locally during development.  To do so:
@itemize
@item
Install @uref{https://github.com/rejeep/carton, Carton}.
@item
Setup your development environment with @command{carton install}.
@item
Run the tests with @command{tests/run.sh}.  Use @command{tests/run.sh
flake8} to run only tests whose names contain the string @code{flake8}.
@end itemize

@c Local Variables:
@c mode: texinfo
@c TeX-master: "flycheck"
@c End:
